owners(address)
setAllowBuying(bool)
nextActionIsAuthorised()
name()
allowBuying()
removeOwner(address)
totalSupply()
setRequireAuthorisation(bool)
allowTransfers()
icoEndDate()
requireAuthorisation()
isOwner(address)
currentSeller()
available_assert_time(uint16,uint64)
runTimeAfterSoftCapReached()
burn(uint256)
fundsWithdrawnByOwners()
sellPrice()
minimumTokenThreshold()
tokensSoldAtIco()
weekLength()
0x5915b6df
setAllowBurns(bool)
setIcoParametersSet(bool)
weekBonuses(uint8)
setFirstYearAllowancePercentage(uint8)
getContractBalance()
addOwner(address)
balanceOf(address)
mintToken(address,uint256)
burnFrom(address,uint256)
setImmediateAllowancePercentage(uint8)
setRunTimeAfterSoftCapReached(uint256)
frozenAccounts(address)
setSecondYearAllowancePercentage(uint8)
0x8b0b94cf
softCap()
link_classic_internal(uint64,int64)
icoBeginDate()
icoParametersSet()
etherHasBeenReturnedToInvestors()
setCurrentSeller(address)
dateSoftCapWasReached()
tokenInitialised()
yearLength()
monthLength()
updateContract()
setTokenName(string)
many_msg_babbage(bytes1)
sendContractFundsToAddress(uint256,address)
setTokenSymbol(string)
returnEtherToInvestors()
initialiseToken()
allowBurns()
ownersTransfer(address,uint256)
maxFundsThatCanBeWithdrawnByOwners()
buyTokens()
setSoftCap(uint256)
investorCount()
setIcoBeginDate(uint256)
authoriseNextAction()
setAllowTransfers(bool)
freezeAccount(address,bool)
checkActionIsAuthorisedAndReset()
setSellPrice(uint256)
0x01dfe200
0x09896800
0x01dfe200
0x01dfe200