getTotalRewards(uint32)
PIXEL_COUNT()
getCommissionWithdrawn(uint32)
getCanvasPainters(uint32)
offerCanvasForSale(uint32,uint256)
0x29ac4b59
PERCENT_DIVIDER()
getCanvasCount()
splitBid(uint256)
withdraw()
getTotalCommission(uint32)
getCanvasState(uint32)
MAX_CANVAS_NAME_LENGTH()
minimumBidAmount()
getCurrentSellOffer(uint32)
isCanvasFinished(uint32)
activeCanvasCount()
setMinimumBidAmount(uint256)
getTime()
COMMISSION()
MAX_ACTIVE_CANVAS()
STATE_NOT_FINISHED()
0x668cf86a
HEIGHT()
createAndBookCanvas(address)
balanceOf(address)
getCurrentBuyOffer(uint32)
MAX_CANVAS_COUNT()
getPixelCount()
acceptSellOffer(uint32)
0x7ee8b2f8
getCanvasByState(uint8)
setPixels(uint32,uint32[],uint8[])
ideal_warn_timed(uint256,uint128)
getCanvasByOwner(address)
addRewardToPendingWithdrawals(uint32)
makeBid(uint32)
cancelBuyOffer(uint32)
STATE_OWNED()
setPixel(uint32,uint32,uint8)
acceptBuyOffer(uint32,uint256)
getCanvasBitmap(uint32)
splitTrade(uint256)
getLastBidForCanvas(uint32)
bookCanvasFor(uint32,address)
calculateCommissionToWithdraw(uint32)
makeBuyOffer(uint32)
getCanvasesWithSellOffer(bool)
cancelSellOffer(uint32)
offerCanvasForSaleToAddress(uint32,uint256,address)
WIDTH()
STATE_INITIAL_BIDDING()
0xd5648358
addCommissionToPendingWithdrawals(uint32)
getCanvasInfo(uint32)
getCanvasPaintedPixelsCount(uint32)
createCanvas()
TRADE_REWARD()
transferOwnership(address)
setCanvasName(uint32,string)
getPixelAuthor(uint32,uint32)